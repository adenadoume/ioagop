
- name: Create dirs
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  loop:
    - "{{ app_dir }}"
    - "{{ app_dir }}/shared"
    - "{{ app_dir }}/shared/media"
    - "{{ app_dir }}/shared/static"

- name: Ensure venv
  command: python3 -m venv "{{ venv_dir }}"
  args:
    creates: "{{ venv_dir }}/bin/activate"

- name: Install pip
  pip:
    name: pip
    state: latest
    virtualenv: "{{ venv_dir }}"

- name: Clone repo
  git:
    repo: "{{ repo_url }}"
    dest: "{{ app_dir }}/current"
    version: main
    force: yes

- name: Install requirements
  pip:
    requirements: "{{ app_dir }}/current/requirements.txt"
    virtualenv: "{{ venv_dir }}"

- name: Write env
  copy:
    dest: "{{ app_dir }}/shared/.env"
    content: |
      DJANGO_SETTINGS_MODULE={{ django_settings_module }}
      SECRET_KEY={{ lookup('password', '/dev/null length=50 chars=ascii_letters,digits') }}
      DATABASE_URL=postgres://{{ postgres_user }}:{{ postgres_password }}@localhost:5432/{{ postgres_db }}
      REDIS_URL=redis://localhost:{{ redis_port }}/0
      ALLOWED_HOSTS={{ allowed_hosts | join(',') }}

- name: Migrate
  command: "{{ venv_dir }}/bin/python manage.py migrate --noinput"
  args: { chdir: "{{ app_dir }}/current" }

- name: Collect static
  command: "{{ venv_dir }}/bin/python manage.py collectstatic --noinput"
  args: { chdir: "{{ app_dir }}/current" }

- name: Gunicorn service
  template:
    src: gunicorn.service.j2
    dest: /etc/systemd/system/{{ project_name }}.service

- name: Restart service
  systemd:
    name: "{{ project_name }}"
    state: restarted
    enabled: true
